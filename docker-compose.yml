# AIRISS v4.0 Enhanced - Docker Compose for Production Deployment
version: '3.8'

services:
  # AIRISS v4.0 Enhanced Main Application
  airiss-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airiss-v4-enhanced
    ports:
      - "8002:8002"
    environment:
      - AIRISS_ENV=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8002
      - WS_HOST=localhost
      - PYTHONPATH=/app
    volumes:
      - airiss_data:/app/data
      - airiss_logs:/app/logs
      - airiss_uploads:/app/uploads
    networks:
      - airiss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airiss.rule=Host(`airiss.okfinancial.com`)"
      - "traefik.http.routers.airiss.tls=true"
      - "traefik.http.routers.airiss.tls.certresolver=letsencrypt"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: airiss-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - airiss_static:/var/www/static:ro
      - letsencrypt_certs:/etc/letsencrypt:ro
    networks:
      - airiss-network
    depends_on:
      - airiss-app
    restart: unless-stopped
    profiles:
      - nginx

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: airiss-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airiss-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass airiss2024!
    profiles:
      - redis

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: airiss-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - airiss-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: airiss-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=airiss2024!
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - airiss-network
    restart: unless-stopped
    profiles:
      - monitoring

# Networks
networks:
  airiss-network:
    driver: bridge
    name: airiss-network

# Volumes
volumes:
  airiss_data:
    name: airiss_data
    driver: local
  airiss_logs:
    name: airiss_logs
    driver: local
  airiss_uploads:
    name: airiss_uploads
    driver: local
  airiss_static:
    name: airiss_static
    driver: local
  redis_data:
    name: redis_data
    driver: local
  prometheus_data:
    name: prometheus_data
    driver: local
  grafana_data:
    name: grafana_data
    driver: local
  letsencrypt_certs:
    name: letsencrypt_certs
    driver: local

# AIRISS v4.0 Docker Compose Configuration
# Production-ready multi-service setup

version: '3.8'

services:
  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:14-alpine
    container_name: airiss_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-airiss}
      POSTGRES_USER: ${POSTGRES_USER:-airiss_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airiss_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - airiss_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airiss_user} -d ${POSTGRES_DB:-airiss}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: airiss_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-airiss_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - airiss_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ================================
  # AIRISS Backend API
  # ================================
  airiss_backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: airiss_backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-airiss_user}:${POSTGRES_PASSWORD:-airiss_secure_password}@postgres:5432/${POSTGRES_DB:-airiss}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-airiss_redis_password}@redis:6379/0
      
      # Application
      SECRET_KEY: ${SECRET_KEY:-your_super_secret_key_change_in_production}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Security
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,airiss.okfinancial.com}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://airiss.okfinancial.com}
      
      # Performance
      WORKERS: ${WORKERS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
    ports:
      - "8002:8002"
    networks:
      - airiss_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ================================
  # Nginx Reverse Proxy
  # ================================
  nginx:
    image: nginx:alpine
    container_name: airiss_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - airiss_network
    depends_on:
      - airiss_backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Monitoring - Prometheus (Optional)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: airiss_prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - airiss_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ================================
  # Monitoring - Grafana (Optional)
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: airiss_grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - airiss_network
    depends_on:
      - prometheus

  # ================================
  # Worker for Background Tasks (Optional)
  # ================================
  airiss_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: airiss_worker
    restart: unless-stopped
    profiles: ["worker"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-airiss_user}:${POSTGRES_PASSWORD:-airiss_secure_password}@postgres:5432/${POSTGRES_DB:-airiss}
      REDIS_URL: redis://:${REDIS_PASSWORD:-airiss_redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your_super_secret_key_change_in_production}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp_data:/app/temp_data
    networks:
      - airiss_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "celery", "worker", "-A", "app.core.celery_app", "--loglevel=info"]

# ================================
# Networks
# ================================
networks:
  airiss_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================================
# Usage Examples:
# ================================
# 
# Production deployment:
# docker-compose up -d
# 
# Development with monitoring:
# docker-compose --profile monitoring up -d
# 
# Full stack with workers:
# docker-compose --profile monitoring --profile worker up -d
# 
# View logs:
# docker-compose logs -f airiss_backend
# 
# Scale backend:
# docker-compose up -d --scale airiss_backend=3
# 
# Update single service:
# docker-compose up -d --no-deps airiss_backend
#

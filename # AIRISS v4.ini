# AIRISS v4.0 DB 통합 분석 테스트
import requests
import json
import time

# 서버 설정
BASE_URL = "http://localhost:8002"
FILE_ID = "edfd8024-8580-4808-b73f-188af32ab423"  # 8단계에서 업로드한 파일

def test_analysis_flow():
    """업로드→분석 플로우 완전 테스트"""
    
    print("🚀 AIRISS v4.0 DB 통합 분석 테스트 시작")
    print("=" * 60)
    
    # 1. 서버 상태 확인
    print("1️⃣ 서버 상태 확인...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("✅ 서버 연결 성공")
            print(f"   응답: {response.json()['message']}")
        else:
            print("❌ 서버 연결 실패")
            return
    except Exception as e:
        print(f"❌ 서버 연결 오류: {e}")
        return
    
    # 2. 분석 시작
    print("\n2️⃣ AIRISS v4.0 하이브리드 분석 시작...")
    
    analysis_request = {
        "file_id": FILE_ID,
        "sample_size": 3,           # 테스트용 소량
        "enable_ai": False          # 빠른 테스트를 위해 AI 비활성화
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/analysis/start",
            json=analysis_request
        )
        
        if response.status_code == 200:
            result = response.json()
            job_id = result['job_id']
            print("✅ 분석 시작 성공!")
            print(f"   작업 ID: {job_id}")
            print(f"   상태: {result['status']}")
            print(f"   메시지: {result['message']}")
            
            # 3. 진행률 모니터링
            print("\n3️⃣ 분석 진행률 모니터링...")
            monitor_analysis(job_id)
            
        else:
            print("❌ 분석 시작 실패")
            print(f"   상태 코드: {response.status_code}")
            print(f"   응답: {response.text}")
            
    except Exception as e:
        print(f"❌ 분석 요청 오류: {e}")

def monitor_analysis(job_id):
    """분석 진행률 모니터링"""
    
    max_attempts = 30  # 최대 30번 (30초)
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{BASE_URL}/analysis/status/{job_id}")
            
            if response.status_code == 200:
                status = response.json()
                
                print(f"   📊 진행률: {status.get('progress', 0):.1f}% "
                      f"({status.get('processed', 0)}/{status.get('total_employees', 0)})")
                
                if status['status'] == 'completed':
                    print("✅ 분석 완료!")
                    
                    # 4. 결과 확인
                    print("\n4️⃣ 분석 결과 확인...")
                    check_results(job_id)
                    break
                    
                elif status['status'] == 'failed':
                    print("❌ 분석 실패")
                    print(f"   오류: {status.get('error', 'Unknown error')}")
                    break
                    
                elif status['status'] == 'processing':
                    time.sleep(1)  # 1초 대기
                    
            else:
                print(f"❌ 상태 확인 실패: {response.status_code}")
                break
                
        except Exception as e:
            print(f"❌ 상태 확인 오류: {e}")
            break
    else:
        print("⏰ 타임아웃: 분석이 예상보다 오래 걸립니다")

def check_results(job_id):
    """분석 결과 확인"""
    
    try:
        response = requests.get(f"{BASE_URL}/analysis/results/{job_id}")
        
        if response.status_code == 200:
            results = response.json()
            
            print("✅ 결과 조회 성공!")
            print(f"   총 분석: {results.get('total_analyzed', 0)}명")
            print(f"   실패: {results.get('failed', 0)}명")
            
            if 'statistics' in results:
                stats = results['statistics']
                print(f"   평균 점수: {stats.get('average_score', 0)}")
                print(f"   최고 점수: {stats.get('max_score', 0)}")
                print(f"   최저 점수: {stats.get('min_score', 0)}")
                
                if 'grade_distribution' in stats:
                    print("   등급 분포:")
                    for grade, count in stats['grade_distribution'].items():
                        print(f"     {grade}: {count}명")
            
            # 샘플 결과 출력
            if 'results' in results and results['results']:
                print("\n📋 샘플 결과 (처음 3명):")
                for i, result in enumerate(results['results'][:3]):
                    print(f"   {i+1}. UID: {result.get('UID', 'N/A')}")
                    print(f"      점수: {result.get('AIRISS_v4_종합점수', 0)}")
                    print(f"      등급: {result.get('OK등급', 'N/A')}")
                    print(f"      신뢰도: {result.get('분석신뢰도', 0)}%")
            
            print("\n🎉 AIRISS v4.0 DB 통합 테스트 완료!")
            print("   ✅ 업로드 → 분석 플로우 완전 연결됨")
            
        else:
            print("❌ 결과 조회 실패")
            print(f"   상태 코드: {response.status_code}")
            print(f"   응답: {response.text}")
            
    except Exception as e:
        print(f"❌ 결과 확인 오류: {e}")

if __name__ == "__main__":
    test_analysis_flow()